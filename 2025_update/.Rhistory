library(tidyverse)
library(openxlsx)
library(magrittr)
value_url <- "https://redfin-public-data.s3.us-west-2.amazonaws.com/redfin_market_tracker/redfin_metro_market_tracker.tsv000.gz"
save_path <- "J:/Projects/V2050/Housing/Monitoring/2025Update/data/metric14_median_home_price_by_type/metric14_raw.csv"
metro_area <- "Seattle, WA"
earliestdate <- "2012-07-01"
latestdate <- "2025-03-01"
# Import Redfin data, limit to metro area and by date
redfin_raw <- read_tsv(value_url)
# Limited to Metro area selected above
value <- redfin_raw %>%
filter(str_detect(region, metro_area)) %>%
transmute(
date = period_begin,
region = region,
property_type = property_type,
median_sale_price = median_sale_price)
# limit to all residential properties, restrict to date range selected above
value <- value %>%
filter(!(property_type == "Multi-Family (2-4 Unit)"))
value <- with(value, value[(date >= earliestdate & date <= latestdate), ])
value$month <- str_sub(value$date, 1, 7)
# Sort by date and property type/pivot
value <- value[order(as.Date(value$date),(factor(value$property_type, levels = c("Condo/Co-op","Single Family Residential","Townhouse","All Residential")))),]
value <- value %>%
pivot_wider(names_from = property_type, values_from = median_sale_price)
# Filter to month of latest date
value <- subset(value, str_sub(value$month, -2,-1) == str_sub(latestdate, -5,-4))
View(value)
View(redfin_raw)
latestdate <- "2025-02-01"
# Import Redfin data, limit to metro area and by date
redfin_raw <- read_tsv(value_url)
# Limited to Metro area selected above
value <- redfin_raw %>%
filter(str_detect(region, metro_area)) %>%
transmute(
date = period_begin,
region = region,
property_type = property_type,
median_sale_price = median_sale_price)
# limit to all residential properties, restrict to date range selected above
value <- value %>%
filter(!(property_type == "Multi-Family (2-4 Unit)"))
value <- with(value, value[(date >= earliestdate & date <= latestdate), ])
value$month <- str_sub(value$date, 1, 7)
# Sort by date and property type/pivot
value <- value[order(as.Date(value$date),(factor(value$property_type, levels = c("Condo/Co-op","Single Family Residential","Townhouse","All Residential")))),]
value <- value %>%
pivot_wider(names_from = property_type, values_from = median_sale_price)
# Filter to month of latest date
value <- subset(value, str_sub(value$month, -2,-1) == str_sub(latestdate, -5,-4))
View(value)
# Export
write.csv(value,file = save_path)
View(value)
library(openxlsx)
library(tidyr)
library(tidyverse)
save_path <- "J:/Projects/V2050/Housing/Monitoring/2025Update/data/metric16_17_affordability_indexes/metric16_17_raw.csv"
mb_hai_raw <- "https://public.tableau.com/app/profile/mason.virant/viz/County_DB_HAIMedianBuyer_Q4_2024/DB-HAIMedianBuyer.csv?County=King,Kitsap,Pierce,Snohomish"
ftb_hai_raw <- "https://public.tableau.com/app/profile/mason.virant/viz/County_DB_HAIFirstTimeBuyer_Q4_2024/DB-HAIFirstTimeBuyer.csv?County=King,Kitsap,Pierce,Snohomish"
# --------------- Download Data ---------------
mb_hai_raw <- read_csv(mb_hai_raw)
library(readr)
# --------------- Download Data ---------------
mb_hai_raw <- read_csv(mb_hai_raw)
library(openxlsx)
library(tidyr)
library(tidyverse)
library(readr)
save_path <- "J:/Projects/V2050/Housing/Monitoring/2025Update/data/metric16_17_affordability_indexes/metric16_17_raw.csv"
mb_hai_link <- "https://public.tableau.com/app/profile/mason.virant/viz/County_DB_HAIMedianBuyer_Q4_2024/DB-HAIMedianBuyer.csv?County=King,Kitsap,Pierce,Snohomish"
ftb_hai_link <- "https://public.tableau.com/app/profile/mason.virant/viz/County_DB_HAIFirstTimeBuyer_Q4_2024/DB-HAIFirstTimeBuyer.csv?County=King,Kitsap,Pierce,Snohomish"
# --------------- Download Data ---------------
mb_hai_raw <- read_csv(mb_hai_link)
library(openxlsx)
library(tidyr)
library(tidyverse)
library(readr)
dir.create("J:/Projects/V2050/Housing/Monitoring/2025Update/data/raw", recursive = TRUE, showWarnings = FALSE)
# Define download destination
mb_hai_path <- "J:/Projects/V2050/Housing/Monitoring/2025Update/data/raw/DB-HAIMedianBuyer.csv"
ftb_hai_path <- "J:/Projects/V2050/Housing/Monitoring/2025Update/data/raw/DB-HAIFirstTimeBuyer.csv"
# Define Tableau dashboard URLs (not direct CSV links, but ones that trigger download)
mb_hai_link <- "https://public.tableau.com/app/profile/mason.virant/viz/County_DB_HAIMedianBuyer_Q4_2024/DB-HAIMedianBuyer.csv?County=King,Kitsap,Pierce,Snohomish"
ftb_hai_link <- "https://public.tableau.com/app/profile/mason.virant/viz/County_DB_HAIFirstTimeBuyer_Q4_2024/DB-HAIFirstTimeBuyer.csv?County=King,Kitsap,Pierce,Snohomish"
# Define download destination
mb_hai_path <- "J:/Projects/V2050/Housing/Monitoring/2025Update/data/raw/DB-HAIMedianBuyer.csv"
ftb_hai_path <- "J:/Projects/V2050/Housing/Monitoring/2025Update/data/raw/DB-HAIFirstTimeBuyer.csv"
# Define Tableau dashboard URLs (not direct CSV links, but ones that trigger download)
mb_hai_link <- "https://public.tableau.com/app/profile/mason.virant/viz/County_DB_HAIMedianBuyer_Q4_2024/DB-HAIMedianBuyer.csv?County=King,Kitsap,Pierce,Snohomish"
ftb_hai_link <- "https://public.tableau.com/app/profile/mason.virant/viz/County_DB_HAIFirstTimeBuyer_Q4_2024/DB-HAIFirstTimeBuyer.csv?County=King,Kitsap,Pierce,Snohomish"
# Download the files
download.file(mb_hai_link, mb_hai_path, mode = "wb")
dir.create("J:/Projects/V2050/Housing/Monitoring/2025Update/data/raw/metric16_17_affordability_indexes", recursive = TRUE, showWarnings = FALSE)
mb_hai_path <- "J:/Projects/V2050/Housing/Monitoring/2025Update/data/metric16_17_affordability_indexes/raw/DB-HAIMedianBuyer.csv"
ftb_hai_path <- "J:/Projects/V2050/Housing/Monitoring/2025Update/data/metric16_17_affordability_indexes/raw/DB-HAIFirstTimeBuyer.csv"
# Define Tableau dashboard URLs (not direct CSV links, but ones that trigger download)
mb_hai_link <- "https://public.tableau.com/app/profile/mason.virant/viz/County_DB_HAIMedianBuyer_Q4_2024/DB-HAIMedianBuyer.csv?County=King,Kitsap,Pierce,Snohomish"
ftb_hai_link <- "https://public.tableau.com/app/profile/mason.virant/viz/County_DB_HAIFirstTimeBuyer_Q4_2024/DB-HAIFirstTimeBuyer.csv?County=King,Kitsap,Pierce,Snohomish"
# --------------- Download Data ---------------
# Download the files
download.file(mb_hai_link, mb_hai_path, mode = "wb")
install.packages("RSelenium")
install.packages("wdman")     # Manages browser drivers
install.packages("binman")    # Manages binary files
install.packages("netstat")   # Required by RSelenium
library(openxlsx)
library(tidyr)
library(tidyverse)
library(readr)
library(RSelenium)
# Set up Chrome Browser
download_dir <- "J:/Projects/V2050/Housing/Monitoring/2025Update/data/metric16_17_affordability_indexes/raw"
eCaps <- list(
chromeOptions = list(
prefs = list(
"download.default_directory" = normalizePath(download_dir),
"download.prompt_for_download" = FALSE,
"directory_upgrade" = TRUE,
"safebrowsing.enabled" = TRUE
),
args = list('--headless', '--disable-gpu')  # Run Chrome in headless mode
)
)
rD <- rsDriver(browser = "chrome", chromever = "latest", extraCapabilities = eCaps, verbose = FALSE, port = 4545L)
library(dplyr)
library(stringr)
library(readr)
library(tidyr)
data_path <- "J:/Projects/V2050/Housing/Monitoring/2025Update/data/metric15_median_home_price_by_county/data_redfin.csv"
save_path <- "J:/Projects/V2050/Housing/Monitoring/2025Update/data/metric15_median_home_price_by_county/metric15_raw.csv"
month <- "June"
# Pull in data downloaded from tableau dashboard (make sure all 4 counties are visible before exporting to CSV)
county_raw <- read_tsv(file = data_path, locale = locale(encoding = "UTF-16LE"))
# Clean
colnames(county_raw) <- as.character(county_raw[1, ])
county_raw <- county_raw[-1, ]
county <- county_raw %>%
select(1, starts_with(month)) %>%
mutate(across(
.cols = -1,                               # Apply to all columns except the first (region)
.fns = ~ as.numeric(
str_replace_all(.x, "\\$", "") |>       # Remove $
str_replace_all("K", "000")           # Replace K with 000
)))
View(county)
ZHVI_raw = read.csv(ZHVI_url)
library(openxlsx)
library(tidyr)
library(stringr)
library(dplyr)
library(magrittr)
library(psrccensus)
library(tidycensus)
library(purrr)
library(readxl)
library(psrchousing)
# assumptions
#  ZHVI: Zillow Home Value Index - All Homes (SFR & Condo) Time series, Smoothed, Seasonally-Adjusted
#  ZORI: Zillow Observed Rent Index - All Homes + Multifamily, Smoothed, Seasonally-Adjusted
export_path <- "J:/Projects/V2050/Housing/Monitoring/2025Update/data/metric12-13_metro_area_rent_home_value"
ZHVI_url <- "https://files.zillowstatic.com/research/public_csvs/zhvi/Metro_zhvi_uc_sfrcondo_tier_0.33_0.67_sm_sa_month.csv"
ZORI_url <- "https://files.zillowstatic.com/research/public_csvs/zori/Metro_zori_uc_sfrcondomfr_sm_sa_month.csv?t=1711667054"
ZHVI_raw = read.csv(ZHVI_url)
ZORI_raw = read.csv(ZORI_url)
# Clean Zillow data
ZHVI <- subset(ZHVI_raw, ZHVI_raw$RegionName == 'Seattle, WA')
ZORI <- subset(ZORI_raw, ZORI_raw$RegionName == 'Seattle, WA')
ZHVI$source <- "ZHVI"
ZORI$source <- "ZORI"
common <- intersect(colnames(ZHVI), colnames(ZORI))
all_data <- rbind(ZHVI[common], ZORI[common])
all_data %<>%
relocate(source, .before = RegionID)
colnames(all_data)<-gsub("X","",colnames(all_data))
View(all_data)
View(ZORI_raw)
library(dplyr)
library(openxlsx)
library(tidyverse)
library(psrchousing)
export_path <- "J:/Projects/V2050/Housing/Monitoring/2025Update/Data/metric01_pop_growth_hu_supply"
source_info <- c("OFM April 1 Population and Housing Estimates. Data representing 1980, 1990, 2000, 2010, 2020, 2025. Calculated by Eric Clute.")
years <- c(1980, 1990, 2000, 2010, 2020, 2025)
# Import ---------------------
hu_raw <- ofm_county_housing_unit_data()
pop_raw <- ofm_county_population_data()
# Clean up data, join ---------------------
hu <- hu_raw %>% filter(geography == "Region") %>% select(year, total) %>% rename(units = total)
pop <- pop_raw %>% filter(geography == "Region") %>% ungroup() %>% select(year, population)
analysis <- left_join(hu,pop, by = "year")
# Calculate change in pop, hu, and ratio ---------------------
analysis <- analysis %>%
filter(year %in% years) %>%
mutate(hu_change = units - lag(units),
pop_change = population - lag(population),
hu_pop_ratio = pop_change / hu_change,
hu_per_cap_1k = hu_change / population * 1000)
View(analysis)
export_file <- paste0(export_path, "/metric01_raw.xlsx")
work_book <- createWorkbook()
addWorksheet(work_book, sheetName = "analysis")
writeData(work_book, sheet = "analysis", analysis)
writeData(work_book, sheet = "analysis", x = data.frame(source_info), startRow = nrow(analysis) + 3, startCol = 1)
saveWorkbook(work_book, file = export_file, overwrite = TRUE)
library(psrccensus)
library(magrittr)
library(purrr)
library(dplyr)
year <- c(2015,2016,2017,2018,2019,2021,2022,2023,2024)
# FUNCTIONS
# ---- Pull PUMS data
pull_data <- function(years){
# returns a list of get_psrc_pums outputs, one for each year
lapply(years, function(x) get_acs_recs(geography = 'county',
table.names = c('DP04'),
years = x,
counties = c("King", "Kitsap", "Pierce", "Snohomish"),
acs.type = 'acs1'))
}
combine_reduce <- function(rent_raw){
rent_raw <- rent_raw %>% filter(`variable` == 'DP04_0134')
}
# PROCESSING
# pull the data
rent_raw <- pull_data(year)
# Grab gross median rent and combine all years
rent_all <- map(rent_raw, ~combine_reduce(.x)) %>%
reduce(bind_rows)
# CLEAN UP
# Reduce unneeded columns
rent_all <- rent_all %>% select(name, estimate, moe, label, acs_type, year, se, cv, reliability)
View(rent_all)
library(psrccensus)
library(psrcplot)
library(tidyverse)
# install psrccensus and get api key by going trough instructions on: https://psrc.github.io/psrccensus/articles/psrccensus.html
Sys.getenv("CENSUS_API_KEY")
# more information on PUMS data: https://www.census.gov/programs-surveys/acs/microdata/documentation.html
# 2023 5-year PUMS data dictionary: https://api.census.gov/data/2023/acs/acs5/pums/variables.html
# list of data
#
# ___FULL DATASETS___
# 1. df_pums: all households
# 2. df_pums_p: all persons
#
# ___AAPI HOUSEHOLD DATASETS___
# 3.df_pums_aapi: all AAPI households                                                      (use: total household count/ tenure/ income)
#   - new variables: RAC2P19_aapi_group10
#     (grouped race category: top 10 populous Asian subgroups, other Asian
#      subgroups and NH&PI)
# 4. df_pums_renter_aapi: all AAPI renter households                                       (use: cost burden)
# 5. df_pums_aapi_allpersons: all households with any AAPI member
#
# ___AAPI PERSONS DATASETS___
# 6. df_pums_p_aapi_renter_worker: (person-level) all adults in AAPI renters households    (use: occupation)
#    - new variables: RAC2P19_aapi_group10_household (workers in RAC2P19_aapi_group10 households)
# ---- full datasets ----
# download 2023 5-year PUMS data with specified variables
pums_2023_h <- get_psrc_pums(span = 5,
dyear = 2023,
level = "h",
vars = c("AGEP",  # Age
"PRACE", # Race
"RAC1P", # Recoded detailed race code
"RAC2P19", # Recoded detailed race code (2019 and prior)
"RAC2P23", # Recoded detaile drace code (2023 and later)
"TEN",   # Tenure
"GRPIP", # Gross rent as a percentage of household income past 12 months
"HINCP",  # Household income
"BIN_POVRATIO",
"SOCP3"))
View(pums_2023_h)
View(pums_2023_h[["variables"]])
## ----- 1. households -----
df_pums <- pums_2023_h %>%
# make new variables
mutate(tenure=factor(case_when(TEN=="Owned free and clear"|TEN=="Owned with mortgage or loan (include home equity loans)" ~ "owner",
TRUE ~"renter"),
levels=c("owner", "renter")),
race_aapi = case_when(PRACE %in% c("Asian alone","Native Hawaiian and Other Pacific Islander alone") ~ "Asian or Pacific Islander",
PRACE == "White alone" ~ "White alone",
TRUE ~ PRACE),
rent_pct_income = factor(case_when(GRPIP < 30 ~"Less than 30 percent",
between(GRPIP,30,50) ~ "Between 30 and 50 percent",
GRPIP > 50 ~ "Greater than 50 percent",
TRUE ~ "No rent paid"),
levels=c("Greater than 50 percent",
"Between 30 and 50 percent",
"Less than 30 percent",
"No rent paid")),
rent_pct_income_30 = factor(case_when(GRPIP < 30 ~"Less than 30 percent",
GRPIP >= 30 ~ "Greater than 30 percent",
TRUE ~ "No rent paid"),
levels=c("Greater than 30 percent",
"Less than 30 percent",
"No rent paid")),
income_poverty_level = case_when(BIN_POVRATIO %in% c("under 0.50","0.50 to 0.99")~"Income below 100% of poverty level",
TRUE~"Income above 100% of poverty level"),
PRACE = case_when(PRACE=="Hispanic or Latino"~"Hispanic/Latinx",
PRACE=="American Indian or Alaskan Native Alone"~"American Indian or Alaskan Native alone",
PRACE=="Some Other Race alone"~"Another Racial Identity",
PRACE=="Two or More Races"~"Multiracial",
TRUE~PRACE),
RAC2P_equivalent = case_when(RAC2P19 != "Code classification is Not Applicable because data are 2023 vintage"),
RAC2P23 != "Code classification is Not Applicable because data are 2019-2022 vintage"))
## ----- 1. households -----
df_pums <- pums_2023_h %>%
# make new variables
mutate(tenure=factor(case_when(TEN=="Owned free and clear"|TEN=="Owned with mortgage or loan (include home equity loans)" ~ "owner",
TRUE ~"renter"),
levels=c("owner", "renter")),
race_aapi = case_when(PRACE %in% c("Asian alone","Native Hawaiian and Other Pacific Islander alone") ~ "Asian or Pacific Islander",
PRACE == "White alone" ~ "White alone",
TRUE ~ PRACE),
rent_pct_income = factor(case_when(GRPIP < 30 ~"Less than 30 percent",
between(GRPIP,30,50) ~ "Between 30 and 50 percent",
GRPIP > 50 ~ "Greater than 50 percent",
TRUE ~ "No rent paid"),
levels=c("Greater than 50 percent",
"Between 30 and 50 percent",
"Less than 30 percent",
"No rent paid")),
rent_pct_income_30 = factor(case_when(GRPIP < 30 ~"Less than 30 percent",
GRPIP >= 30 ~ "Greater than 30 percent",
TRUE ~ "No rent paid"),
levels=c("Greater than 30 percent",
"Less than 30 percent",
"No rent paid")),
income_poverty_level = case_when(BIN_POVRATIO %in% c("under 0.50","0.50 to 0.99")~"Income below 100% of poverty level",
TRUE~"Income above 100% of poverty level"),
PRACE = case_when(PRACE=="Hispanic or Latino"~"Hispanic/Latinx",
PRACE=="American Indian or Alaskan Native Alone"~"American Indian or Alaskan Native alone",
PRACE=="Some Other Race alone"~"Another Racial Identity",
PRACE=="Two or More Races"~"Multiracial",
TRUE~PRACE),
RAC2P_equivalent = case_when(RAC2P19 != "Code classification is Not Applicable because data are 2023 vintage"),
RAC2P23 != "Code classification is Not Applicable because data are 2019-2022 vintage")
)
## ----- 1. households -----
df_pums <- pums_2023_h %>%
# make new variables
mutate(tenure=factor(case_when(TEN=="Owned free and clear"|TEN=="Owned with mortgage or loan (include home equity loans)" ~ "owner",
TRUE ~"renter"),
levels=c("owner", "renter")),
race_aapi = case_when(PRACE %in% c("Asian alone","Native Hawaiian and Other Pacific Islander alone") ~ "Asian or Pacific Islander",
PRACE == "White alone" ~ "White alone",
TRUE ~ PRACE),
rent_pct_income = factor(case_when(GRPIP < 30 ~"Less than 30 percent",
between(GRPIP,30,50) ~ "Between 30 and 50 percent",
GRPIP > 50 ~ "Greater than 50 percent",
TRUE ~ "No rent paid"),
levels=c("Greater than 50 percent",
"Between 30 and 50 percent",
"Less than 30 percent",
"No rent paid")),
rent_pct_income_30 = factor(case_when(GRPIP < 30 ~"Less than 30 percent",
GRPIP >= 30 ~ "Greater than 30 percent",
TRUE ~ "No rent paid"),
levels=c("Greater than 30 percent",
"Less than 30 percent",
"No rent paid")),
income_poverty_level = case_when(BIN_POVRATIO %in% c("under 0.50","0.50 to 0.99")~"Income below 100% of poverty level",
TRUE~"Income above 100% of poverty level"),
PRACE = case_when(PRACE=="Hispanic or Latino"~"Hispanic/Latinx",
PRACE=="American Indian or Alaskan Native Alone"~"American Indian or Alaskan Native alone",
PRACE=="Some Other Race alone"~"Another Racial Identity",
PRACE=="Two or More Races"~"Multiracial",
TRUE~PRACE),
RAC2P_equivalent = coalesce(
na_if(RAC2P19, "Code classification is Not Applicable because data are 2023 vintage"),
na_if(RAC2P23, "Code classification is Not Applicable because data are 2019-2022 vintage")))
View(pums_2023_h)
View(pums_2023_h[["variables"]])
View(df_pums)
View(df_pums[["variables"]])
View(df_pums)
View(df_pums[["variables"]])
source("metric19_aapi_trend.R")
renter <- psrc_pums_count(df_pums_renter_aapi, group_vars=c("PRACE","RAC2P_equivalent_aapi_group10","rent_pct_income_30"), rr=TRUE) %>%
add_row(psrc_pums_count(df_pums_renter, group_vars=c("PRACE", "rent_pct_income_30")) %>%
mutate(RAC2P_equivalent_aapi_group10 = "Asian alone", .after="COUNTY")) %>%
filter(PRACE == "Asian alone") %>%
add_row(psrc_pums_count(df_pums_renter, group_vars=c("rent_pct_income_30")) %>%
mutate(RAC2P_equivalent_aapi_group10 = "Region", .after="COUNTY"))
tenure_prace <- psrc_pums_count(df_pums_renter %>% mutate(PRACE = case_when(PRACE %in% c("Some Other Race alone", "Two or More Races")~"Other",
TRUE~PRACE)),
group_vars=c("PRACE","rent_pct_income_30")) %>%
mutate(PRACE = case_when(PRACE=="Hispanic or Latino"~"Hispanic or Latinx",
TRUE~PRACE)) %>%
add_row(psrc_pums_count(df_pums_renter, group_vars=c("rent_pct_income_30")) %>%
mutate(PRACE = "Region", .after="COUNTY"))
all_race_renter <- psrc_pums_count(df_pums_renter, group_vars=c("PRACE","rent_pct_income_30"), rr=TRUE) %>%
add_row(psrc_pums_count(df_pums, group_vars=c("rent_pct_income_30")) %>%
mutate(PRACE = "Region", .after="COUNTY"))
# Making a Renter Cost Burden by Asian Sub-group stacked bar chart
cost_burdened <- renter %>%
filter(rent_pct_income_30 == "Greater than 30 percent") %>%
select(RAC2P_equivalent_aapi_group10, count, count_moe, share, share_moe, reliability) %>%
group_by(RAC2P_equivalent_aapi_group10) %>%
summarize(across(c(count, count_moe, share, share_moe), sum)) %>% # aggregates all numerical values based on race
dplyr::mutate(perc = paste0(sprintf("%4.0f", share * 100)))
ggplot(cost_burdened, aes(x=reorder(RAC2P_equivalent_aapi_group10, share), y=share, fill=RAC2P_equivalent_aapi_group10)) +
geom_col()+
geom_text(aes(y=share, label=scales::percent(share, accuracy = 0.1)), size = 7, hjust=-0.5)+
geom_errorbar(aes(ymin=share-share_moe, ymax=share+share_moe), width=0.2) +
scale_y_continuous(labels=scales::percent)+
scale_fill_manual(values = psrc_colors$pgnobgy_10)+
coord_flip()+
psrc_style() +
labs(title = "Renter Cost Burden by APPI subgroups", caption = "data: AAPI Renter households by householder race", x="AAPI subgroups") +
theme(axis.title = element_blank(), plot.title = element_text(size = 30), legend.position = "none", axis.text = element_text(size= 20), plot.caption = element_text(size = 20))
cost_burdened_all_race <- tenure_prace %>%
filter(rent_pct_income_30 == "Greater than 30 percent") %>%
select(PRACE, count, count_moe, share, share_moe) %>%
group_by(PRACE) %>%
summarize(across(c(count, count_moe, share, share_moe), sum)) %>% # aggregates all numerical values based on race
dplyr::mutate(perc = paste0(sprintf("%4.0f", share * 100)))
ggplot(cost_burdened_all_race, aes(x=reorder(PRACE, share), y=share, fill=PRACE)) +
geom_col()+
geom_text(aes(y=share, label=scales::percent(share, accuracy = 0.1)), size = 7, hjust=-0.5)+
geom_errorbar(aes(ymin=share-share_moe, ymax=share+share_moe), width=0.2) +
scale_y_continuous(labels=scales::percent)+
scale_fill_manual(values = psrc_colors$pgnobgy_10)+
coord_flip() +
psrc_style() +
labs(title = "Renter Cost Burden by Race/Ethnicity", caption = "data: Renter households by householder race", x="All Races/Ethnicities") +
theme(axis.title = element_blank(), plot.title = element_text(size = 30), legend.position = "none", axis.text = element_text(size= 20), plot.caption = element_text(size = 20))
library(data.table)
library(kableExtra)
job3_by_asian_alone <- psrc_pums_count(df_pums_p_aapi_renter_worker %>% filter(RAC2P_equivalent_aapi_group10_household!="Native Hawaiian and Other Pacific Islander"), group_vars=c("SOCP3")) %>%
arrange(desc(count))
job3_by_aapi_race <- psrc_pums_count(df_pums_p_aapi_renter_worker, group_vars=c("RAC2P_equivalent_aapi_group10_household","SOCP3")) %>%
mutate(PRACE="Asian alone", .before="RAC2P_equivalent_aapi_group10_household") %>%
add_row(psrc_pums_count(df_pums_renter_all_race, group_vars=c("PRACE", "SOCP3")) %>%
mutate(RAC2P_equivalent_aapi_group10_household = "Asian alone", .after="COUNTY")) %>%
filter(PRACE == "Asian alone") %>%
add_row(psrc_pums_count(df_pums, group_vars=c("SOCP3")) %>%
mutate(RAC2P_equivalent_aapi_group10_household = "Region", .after="COUNTY"))
source("metric19_aapi_trend.R")
renter <- psrc_pums_count(df_pums_renter_aapi, group_vars=c("PRACE","RAC2P_equivalent_aapi_group10","rent_pct_income_30"), rr=TRUE) %>%
add_row(psrc_pums_count(df_pums_renter, group_vars=c("PRACE", "rent_pct_income_30")) %>%
mutate(RAC2P_equivalent_aapi_group10 = "Asian alone", .after="COUNTY")) %>%
filter(PRACE == "Asian alone") %>%
add_row(psrc_pums_count(df_pums_renter, group_vars=c("rent_pct_income_30")) %>%
mutate(RAC2P_equivalent_aapi_group10 = "Region", .after="COUNTY"))
tenure_prace <- psrc_pums_count(df_pums_renter %>% mutate(PRACE = case_when(PRACE %in% c("Some Other Race alone", "Two or More Races")~"Other",
TRUE~PRACE)),
group_vars=c("PRACE","rent_pct_income_30")) %>%
mutate(PRACE = case_when(PRACE=="Hispanic or Latino"~"Hispanic or Latinx",
TRUE~PRACE)) %>%
add_row(psrc_pums_count(df_pums_renter, group_vars=c("rent_pct_income_30")) %>%
mutate(PRACE = "Region", .after="COUNTY"))
all_race_renter <- psrc_pums_count(df_pums_renter, group_vars=c("PRACE","rent_pct_income_30"), rr=TRUE) %>%
add_row(psrc_pums_count(df_pums, group_vars=c("rent_pct_income_30")) %>%
mutate(PRACE = "Region", .after="COUNTY"))
# Making a Renter Cost Burden by Asian Sub-group stacked bar chart
cost_burdened <- renter %>%
filter(rent_pct_income_30 == "Greater than 30 percent") %>%
select(RAC2P_equivalent_aapi_group10, count, count_moe, share, share_moe, reliability) %>%
group_by(RAC2P_equivalent_aapi_group10) %>%
summarize(across(c(count, count_moe, share, share_moe), sum)) %>% # aggregates all numerical values based on race
dplyr::mutate(perc = paste0(sprintf("%4.0f", share * 100)))
ggplot(cost_burdened, aes(x=reorder(RAC2P_equivalent_aapi_group10, share), y=share, fill=RAC2P_equivalent_aapi_group10)) +
geom_col()+
geom_text(aes(y=share, label=scales::percent(share, accuracy = 0.1)), size = 7, hjust=-0.5)+
geom_errorbar(aes(ymin=share-share_moe, ymax=share+share_moe), width=0.2) +
scale_y_continuous(labels=scales::percent)+
scale_fill_manual(values = psrc_colors$pgnobgy_10)+
coord_flip()+
psrc_style() +
labs(title = "Renter Cost Burden by APPI subgroups", caption = "data: AAPI Renter households by householder race", x="AAPI subgroups") +
theme(axis.title = element_blank(), plot.title = element_text(size = 30), legend.position = "none", axis.text = element_text(size= 20), plot.caption = element_text(size = 20))
cost_burdened_all_race <- tenure_prace %>%
filter(rent_pct_income_30 == "Greater than 30 percent") %>%
select(PRACE, count, count_moe, share, share_moe) %>%
group_by(PRACE) %>%
summarize(across(c(count, count_moe, share, share_moe), sum)) %>% # aggregates all numerical values based on race
dplyr::mutate(perc = paste0(sprintf("%4.0f", share * 100)))
ggplot(cost_burdened_all_race, aes(x=reorder(PRACE, share), y=share, fill=PRACE)) +
geom_col()+
geom_text(aes(y=share, label=scales::percent(share, accuracy = 0.1)), size = 7, hjust=-0.5)+
geom_errorbar(aes(ymin=share-share_moe, ymax=share+share_moe), width=0.2) +
scale_y_continuous(labels=scales::percent)+
scale_fill_manual(values = psrc_colors$pgnobgy_10)+
coord_flip() +
psrc_style() +
labs(title = "Renter Cost Burden by Race/Ethnicity", caption = "data: Renter households by householder race", x="All Races/Ethnicities") +
theme(axis.title = element_blank(), plot.title = element_text(size = 30), legend.position = "none", axis.text = element_text(size= 20), plot.caption = element_text(size = 20))
library(data.table)
library(kableExtra)
job3_by_asian_alone <- psrc_pums_count(df_pums_p_aapi_renter_worker %>% filter(RAC2P_equivalent_aapi_group10_household!="Native Hawaiian and Other Pacific Islander"), group_vars=c("SOCP3")) %>%
arrange(desc(count))
job3_by_aapi_race <- psrc_pums_count(df_pums_p_aapi_renter_worker, group_vars=c("RAC2P_equivalent_aapi_group10_household","SOCP3")) %>%
mutate(PRACE="Asian alone", .before="RAC2P_equivalent_aapi_group10_household") %>%
add_row(psrc_pums_count(df_pums_renter_all_race, group_vars=c("PRACE", "SOCP3")) %>%
mutate(RAC2P_equivalent_aapi_group10_household = "Asian alone", .after="COUNTY")) %>%
filter(PRACE == "Asian alone") %>%
add_row(psrc_pums_count(df_pums, group_vars=c("SOCP3")) %>%
mutate(RAC2P_equivalent_aapi_group10_household = "Region", .after="COUNTY"))
View(cost_burdened)
