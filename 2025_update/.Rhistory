library(tidyverse)
library(openxlsx)
library(magrittr)
value_url <- "https://redfin-public-data.s3.us-west-2.amazonaws.com/redfin_market_tracker/redfin_metro_market_tracker.tsv000.gz"
save_path <- "J:/Projects/V2050/Housing/Monitoring/2025Update/data/metric14_median_home_price_by_type/metric14_raw.csv"
metro_area <- "Seattle, WA"
earliestdate <- "2012-07-01"
latestdate <- "2025-03-01"
# Import Redfin data, limit to metro area and by date
redfin_raw <- read_tsv(value_url)
# Limited to Metro area selected above
value <- redfin_raw %>%
filter(str_detect(region, metro_area)) %>%
transmute(
date = period_begin,
region = region,
property_type = property_type,
median_sale_price = median_sale_price)
# limit to all residential properties, restrict to date range selected above
value <- value %>%
filter(!(property_type == "Multi-Family (2-4 Unit)"))
value <- with(value, value[(date >= earliestdate & date <= latestdate), ])
value$month <- str_sub(value$date, 1, 7)
# Sort by date and property type/pivot
value <- value[order(as.Date(value$date),(factor(value$property_type, levels = c("Condo/Co-op","Single Family Residential","Townhouse","All Residential")))),]
value <- value %>%
pivot_wider(names_from = property_type, values_from = median_sale_price)
# Filter to month of latest date
value <- subset(value, str_sub(value$month, -2,-1) == str_sub(latestdate, -5,-4))
View(value)
View(redfin_raw)
latestdate <- "2025-02-01"
# Import Redfin data, limit to metro area and by date
redfin_raw <- read_tsv(value_url)
# Limited to Metro area selected above
value <- redfin_raw %>%
filter(str_detect(region, metro_area)) %>%
transmute(
date = period_begin,
region = region,
property_type = property_type,
median_sale_price = median_sale_price)
# limit to all residential properties, restrict to date range selected above
value <- value %>%
filter(!(property_type == "Multi-Family (2-4 Unit)"))
value <- with(value, value[(date >= earliestdate & date <= latestdate), ])
value$month <- str_sub(value$date, 1, 7)
# Sort by date and property type/pivot
value <- value[order(as.Date(value$date),(factor(value$property_type, levels = c("Condo/Co-op","Single Family Residential","Townhouse","All Residential")))),]
value <- value %>%
pivot_wider(names_from = property_type, values_from = median_sale_price)
# Filter to month of latest date
value <- subset(value, str_sub(value$month, -2,-1) == str_sub(latestdate, -5,-4))
View(value)
# Export
write.csv(value,file = save_path)
View(value)
library(openxlsx)
library(tidyr)
library(tidyverse)
save_path <- "J:/Projects/V2050/Housing/Monitoring/2025Update/data/metric16_17_affordability_indexes/metric16_17_raw.csv"
mb_hai_raw <- "https://public.tableau.com/app/profile/mason.virant/viz/County_DB_HAIMedianBuyer_Q4_2024/DB-HAIMedianBuyer.csv?County=King,Kitsap,Pierce,Snohomish"
ftb_hai_raw <- "https://public.tableau.com/app/profile/mason.virant/viz/County_DB_HAIFirstTimeBuyer_Q4_2024/DB-HAIFirstTimeBuyer.csv?County=King,Kitsap,Pierce,Snohomish"
# --------------- Download Data ---------------
mb_hai_raw <- read_csv(mb_hai_raw)
library(readr)
# --------------- Download Data ---------------
mb_hai_raw <- read_csv(mb_hai_raw)
library(openxlsx)
library(tidyr)
library(tidyverse)
library(readr)
save_path <- "J:/Projects/V2050/Housing/Monitoring/2025Update/data/metric16_17_affordability_indexes/metric16_17_raw.csv"
mb_hai_link <- "https://public.tableau.com/app/profile/mason.virant/viz/County_DB_HAIMedianBuyer_Q4_2024/DB-HAIMedianBuyer.csv?County=King,Kitsap,Pierce,Snohomish"
ftb_hai_link <- "https://public.tableau.com/app/profile/mason.virant/viz/County_DB_HAIFirstTimeBuyer_Q4_2024/DB-HAIFirstTimeBuyer.csv?County=King,Kitsap,Pierce,Snohomish"
# --------------- Download Data ---------------
mb_hai_raw <- read_csv(mb_hai_link)
library(openxlsx)
library(tidyr)
library(tidyverse)
library(readr)
dir.create("J:/Projects/V2050/Housing/Monitoring/2025Update/data/raw", recursive = TRUE, showWarnings = FALSE)
# Define download destination
mb_hai_path <- "J:/Projects/V2050/Housing/Monitoring/2025Update/data/raw/DB-HAIMedianBuyer.csv"
ftb_hai_path <- "J:/Projects/V2050/Housing/Monitoring/2025Update/data/raw/DB-HAIFirstTimeBuyer.csv"
# Define Tableau dashboard URLs (not direct CSV links, but ones that trigger download)
mb_hai_link <- "https://public.tableau.com/app/profile/mason.virant/viz/County_DB_HAIMedianBuyer_Q4_2024/DB-HAIMedianBuyer.csv?County=King,Kitsap,Pierce,Snohomish"
ftb_hai_link <- "https://public.tableau.com/app/profile/mason.virant/viz/County_DB_HAIFirstTimeBuyer_Q4_2024/DB-HAIFirstTimeBuyer.csv?County=King,Kitsap,Pierce,Snohomish"
# Define download destination
mb_hai_path <- "J:/Projects/V2050/Housing/Monitoring/2025Update/data/raw/DB-HAIMedianBuyer.csv"
ftb_hai_path <- "J:/Projects/V2050/Housing/Monitoring/2025Update/data/raw/DB-HAIFirstTimeBuyer.csv"
# Define Tableau dashboard URLs (not direct CSV links, but ones that trigger download)
mb_hai_link <- "https://public.tableau.com/app/profile/mason.virant/viz/County_DB_HAIMedianBuyer_Q4_2024/DB-HAIMedianBuyer.csv?County=King,Kitsap,Pierce,Snohomish"
ftb_hai_link <- "https://public.tableau.com/app/profile/mason.virant/viz/County_DB_HAIFirstTimeBuyer_Q4_2024/DB-HAIFirstTimeBuyer.csv?County=King,Kitsap,Pierce,Snohomish"
# Download the files
download.file(mb_hai_link, mb_hai_path, mode = "wb")
dir.create("J:/Projects/V2050/Housing/Monitoring/2025Update/data/raw/metric16_17_affordability_indexes", recursive = TRUE, showWarnings = FALSE)
mb_hai_path <- "J:/Projects/V2050/Housing/Monitoring/2025Update/data/metric16_17_affordability_indexes/raw/DB-HAIMedianBuyer.csv"
ftb_hai_path <- "J:/Projects/V2050/Housing/Monitoring/2025Update/data/metric16_17_affordability_indexes/raw/DB-HAIFirstTimeBuyer.csv"
# Define Tableau dashboard URLs (not direct CSV links, but ones that trigger download)
mb_hai_link <- "https://public.tableau.com/app/profile/mason.virant/viz/County_DB_HAIMedianBuyer_Q4_2024/DB-HAIMedianBuyer.csv?County=King,Kitsap,Pierce,Snohomish"
ftb_hai_link <- "https://public.tableau.com/app/profile/mason.virant/viz/County_DB_HAIFirstTimeBuyer_Q4_2024/DB-HAIFirstTimeBuyer.csv?County=King,Kitsap,Pierce,Snohomish"
# --------------- Download Data ---------------
# Download the files
download.file(mb_hai_link, mb_hai_path, mode = "wb")
install.packages("RSelenium")
install.packages("wdman")     # Manages browser drivers
install.packages("binman")    # Manages binary files
install.packages("netstat")   # Required by RSelenium
library(openxlsx)
library(tidyr)
library(tidyverse)
library(readr)
library(RSelenium)
# Set up Chrome Browser
download_dir <- "J:/Projects/V2050/Housing/Monitoring/2025Update/data/metric16_17_affordability_indexes/raw"
eCaps <- list(
chromeOptions = list(
prefs = list(
"download.default_directory" = normalizePath(download_dir),
"download.prompt_for_download" = FALSE,
"directory_upgrade" = TRUE,
"safebrowsing.enabled" = TRUE
),
args = list('--headless', '--disable-gpu')  # Run Chrome in headless mode
)
)
rD <- rsDriver(browser = "chrome", chromever = "latest", extraCapabilities = eCaps, verbose = FALSE, port = 4545L)
